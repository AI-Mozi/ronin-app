#!/usr/bin/env bash

#
# Prints a log message.
#
function log()
{
	if [[ -t 1 ]]; then
		echo -e "\x1b[1m\x1b[32m>>>\x1b[0m \x1b[1m$1\x1b[0m"
	else
		echo ">>> $1"
	fi
}

#
# Prints a warn message.
#
function warn()
{
	if [[ -t 1 ]]; then
		echo -e "\x1b[1m\x1b[33m***\x1b[0m \x1b[1m$1\x1b[0m" >&2
	else
		echo "*** $1" >&2
	fi
}

#
# Prints an error message.
#
function error()
{
	if [[ -t 1 ]]; then
		echo -e "\x1b[1m\x1b[31m!!!\x1b[0m \x1b[1m$1\x1b[0m" >&2
	else
		echo "!!! $1" >&2
	fi
}

#
# Prints an error message and exists with -1.
#
function fail()
{
	error "$@"
	exit -1
}

environment="development"
port=1337

#
# Print the --help usage.
#
function print_usage()
{
	cat <<USAGE
usage: ./scripts/server [OPTIONS]

Options:
	-e, --environment production|development
	    			Sets the environment
	-p, --port PORT		Sets the web server port
	-V, --version		Prints the version
	-h, --help		Prints this message

USAGE
}

#
# Parse additional command-line options.
#
function parse_options()
{
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-e|--environment)
				case "$2" in
					production|development)
						environment="$2"
						shift 2
						;;
					*)
						echo "server: invalid environment $2" >&2
						return 1
						;;
				esac
				;;
			-p|--port)
				port="$2"
				shift 2
				;;
			-h|--help)
				print_usage
				exit
				;;
			-*)
				echo "server: unrecognized option $1" >&2
				return 1
				;;
			*)
				echo "server: unexpected argument $1" >&2
				return 1
				;;
		esac
	done
}

parse_options "$@" || exit $?

pids=()

if [[ -z "$(pgrep redis-server)" ]]; then
	if ! command -v redis-server >/dev/null; then
		fail "server: redis-server is not installed!"
	fi

	redis-server &
	pids+=($!)
fi

log "Starting Web server on localhost:${port} and Sidekiq ..."

case "$environment" in
	development)	bundle exec foreman start -p "$port" -f Procfile.dev ;;
	production)	bundle exec foreman start -p "$port" ;;
esac

for pid in "${pids[@]}"; do
	wait "$pid"
done
